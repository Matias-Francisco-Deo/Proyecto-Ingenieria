name: CI

on:
    push:
        branches: [main, dev, feature/imagenDocker]
    pull_request:
        branches: [main, dev, feature/imagenDocker]

jobs:
    backend-tests:
        name: Backend - Tests (Docker + Postgres)
        runs-on: ubuntu-latest

        # 1. Configuraci√≥n del Servicio de Base de Datos
        # GitHub Actions garantiza que este servicio est√© saludable antes de ejecutar los pasos.
        services:
            postgres:
                image: postgres:15
                env:
                    # Estas variables son usadas por el servicio Postgres
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: root
                    POSTGRES_DB: reservo
                # Exponemos el puerto para que el runner (y los contenedores en la misma red) puedan acceder.
                ports:
                    - 5432:5432
                options: >-
                    # Health check para asegurar que Postgres est√© listo
                    --health-cmd="pg_isready -U postgres"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=5

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Backend Docker image
              # Construye la imagen localmente.
              run: docker build -t reservo-backend:latest ./server

            # 2. Ejecutar Tests - Usando docker run --rm en la red de servicios
            - name: Run Backend Tests inside Docker
              run: |
                  echo "üèÉ Running Maven tests inside a temporary container..."
                  # Utilizamos 'docker run' para ejecutar el comando Maven directamente.
                  # Las variables DB_HOST/DB_PORT/etc. DEBEN apuntar al nombre del servicio 'postgres'.
                  docker run --rm \
                      --name reservo-tests-runner \
                      -v ${{ github.workspace }}:/app \
                      -w /app/server \
                      -e DB_HOST=postgres \
                      -e DB_PORT=5432 \
                      -e DB_NAME=reservo \
                      -e DB_USER=postgres \
                      -e DB_PASSWORD=root \
                      reservo-backend:latest \
                      sh -c "mvn -B clean verify || exit 1"

            - name: Publish Test Results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: backend-test-results
                  path: server/target/surefire-reports/

            # 3. Smoke Test - Verificar que la app inicia y se conecta a la DB
            - name: Smoke Test - Verify app starts (timeout 40s)
              run: |
                  echo "üöÄ Starting container for smoke test..."
                  # Ejecutamos la imagen de la aplicaci√≥n en el puerto 8081 y enlazamos a 'postgres'.
                  docker run -d --name reservo-test \
                      -p 8081:8081 \
                      -e DB_HOST=postgres \
                      -e DB_PORT=5432 \
                      -e DB_NAME=reservo \
                      -e DB_USER=postgres \
                      -e DB_PASSWORD=root \
                      -e SPRING_MAIL_USERNAME=reservoapptmmj@gmail.com \
                      -e "SPRING_MAIL_PASSWORD=..." \
                      reservo-backend:latest

                  echo "‚è≥ Waiting for app to start (max 40s)..."
                  for i in {1..8}; do
                    # El health check se realiza desde el runner (host) al puerto 8081 mapeado.
                    if curl -fs http://localhost:8081/actuator/health > /dev/null; then
                      echo "‚úÖ App is healthy!"
                      break
                    fi
                    echo "Waiting..."
                    sleep 5
                  done

                  if ! curl -fs http://localhost:8081/actuator/health > /dev/null; then
                    echo "‚ùå App failed to start. Showing logs:"
                    docker logs reservo-test
                    exit 1
                  fi

            - name: Stop Backend Container
              if: always()
              run: docker rm -f reservo-test || true

    frontend:
        name: Frontend - React
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: npm

            - name: Install dependencies
              run: npm install
              working-directory: client

            - name: Build frontend
              run: npm run nottscbuild
              working-directory: client
